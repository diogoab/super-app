name: Build and Deploy

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build_docker_image:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      # SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=super-app
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}  # Nome da sua organização no SonarCloud
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*.test.js

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to AWS ECR
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REPOSITORY_URI: ${{ vars.REPOSITORY_URI }}
        run: |
          echo "Logging in to Amazon ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI

      - name: Build Docker image
        env:
          ECR_REPOSITORY_URI: ${{ vars.REPOSITORY_URI }}
        run: |
          echo "Building Docker Image..."
          TAG="${{ github.ref_name }}-${{ github.sha }}-${{ github.run_id }}"
          IMAGE_FULL_NAME="${{ github.repository }}:${TAG}"
          docker build -t $ECR_REPOSITORY_URI/$IMAGE_FULL_NAME .
          echo $IMAGE_FULL_NAME > image_full_name.txt
          echo ${{ github.ref_name }} > target_branch.txt

      # Trivy Scan na imagem Docker
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ vars.REPOSITORY_URI }}/${{ github.repository }}:${{ github.ref_name }}-${{ github.sha }}-${{ github.run_id }}"
          format: "table"
          exit-code: "1"  # Falha o pipeline se vulnerabilidades críticas forem encontradas
          ignore-unfixed: true  # Ignora vulnerabilidades sem correção disponível
          vuln-type: "os,library"  # Escaneia pacotes do SO e bibliotecas
          severity: "CRITICAL,HIGH"  # Falha apenas em vulnerabilidades críticas ou altas

      - name: Push Docker image to ECR
        env:
          ECR_REPOSITORY_URI: ${{ vars.REPOSITORY_URI }}
        run: |
          IMAGE_FULL_NAME=$(cat image_full_name.txt)
          docker push $ECR_REPOSITORY_URI/$IMAGE_FULL_NAME

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: image_full_name
          path: image_full_name.txt

      - name: Save target branch
        uses: actions/upload-artifact@v4
        with:
          name: target_branch
          path: target_branch.txt

  deploy_argocd:
    if: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-latest
    needs: build_docker_image
    environment: ${{ github.ref_name }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: image_full_name

      - name: Download target branch
        uses: actions/download-artifact@v4
        with:
          name: target_branch

      - name: Set up Git
        run: |
          git config --global user.email "rdi.devops"
          git config --global user.name "rdi.devops"

      - name: Install yq
        run: sudo snap install yq  # Necessário para manipular YAML no próximo passo

      - name: Update Kubernetes Deployment
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          ECR_REPOSITORY_URI: ${{ vars.REPOSITORY_URI }}
        run: |
          IMAGE_FULL_NAME=$(cat image_full_name.txt)
          TARGET_BRANCH=$(cat target_branch.txt)
          echo "Cloning repository..."
          git clone https://${{ secrets.REPO_ACCESS_TOKEN }}@github.com/diogoab/gitops-test.git
          cd gitops-test
          echo "Updating deployment image..."
          yq -i '.spec.template.spec.containers[0].image = "'$ECR_REPOSITORY_URI'/'$IMAGE_FULL_NAME'"' k8s/deployment.yaml
          git add k8s/deployment.yaml
          git commit -m "Update deployment image to $IMAGE_FULL_NAME"
          git push origin main